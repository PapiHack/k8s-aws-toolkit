apiVersion: batch/v1
kind: CronJob
metadata:
  name: ecr-credentials-refresh
  namespace: acme-system
spec:
  schedule: 0 */11 * * *
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - name: ecr-credentials-refresh
              image: papihack/k8s-aws-toolkit:naruto
              command:
                - /bin/sh
                - '-c'
                - >-
                  aws --version 

                  aws ecr get-login-password --region ${AWS_REGION}

                  echo "[*] Deleting ImagePullSecrets..."

                  kube_namespaces=($(kubectl get ns --no-headers -o custom-columns=":metadata.name" | awk '{print $1}'))
                  
                  for ns in "${kube_namespaces[@]}"
                  do
                    :
                    echo "[*] $(date): Updating secret for namespace - ${ns}"
                    kubectl delete secret -n ${ns} --ignore-not-found ${SECRET_NAME}
                    echo "[*] Recreating ImagePullSecrets..."
                    kubectl create secret -n ${ns} docker-registry ${SECRET_NAME} \
                    --docker-server=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com \
                    --docker-username=AWS \
                    --docker-password="$(aws ecr get-login-password --region ${AWS_REGION})" 
                    echo "[*] Secret recreated !!!"
                  done

                  echo "[*] $(date): All ImagePullSecrets updated for all namespaces."

              env:
                - name: AWS_REGION
                  value: us-west-2
                - name: SECRET_NAME
                  value: aws-ecr-registry-credentials # secret name
                - name: AWS_ACCOUNT_ID
                  valueFrom:
                    secretKeyRef:
                      name: aws-credentials
                      key: AWS_ACCOUNT_ID
                - name: AWS_ACCESS_KEY_ID
                  valueFrom:
                    secretKeyRef:
                      name: aws-credentials
                      key: AWS_ACCESS_KEY_ID
                - name: AWS_SECRET_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      name: aws-credentials
                      key: AWS_SECRET_ACCESS_KEY
              imagePullPolicy: IfNotPresent
          restartPolicy: OnFailure
          serviceAccountName: aws-creds-cronjob-sa
          serviceAccount: aws-creds-cronjob-sa
